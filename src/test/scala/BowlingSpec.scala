package Scorecard

import org.scalatest._
/**
 * Created by andrew on 07/04/17.
 */
class ScorecardSpec   extends FlatSpec with Matchers {
  "A new scorecard" should "report the next roll as Frame 1: Roll 1" in {
    val myScorecard = new Scorecard
    myScorecard.nextRoll should be ("Frame 1: Roll 1")
  }

  "A new scorecard" should "report the total score as 0" in {
    val myScorecard = new Scorecard
    myScorecard.totalScore should be (0)
  }

  "A new scorecard" should "respond to a roll of zero with a scorecard that reports the total score as 0" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(0)
    nextScorecard.isRight should be (true)
    nextScorecard.right.get.totalScore should be (0)
  }

  "A new scorecard" should "respond to a roll of zero with a scorecard that reports the next roll as Frame 1: Roll 2" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(0)
    nextScorecard.isRight should be (true)
    nextScorecard.right.get.nextRoll should be ("Frame 1: Roll 2")
  }

  "A new scorecard" should "respond to a roll of 1 with a scorecard that reports the total score as 1" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(1)
    nextScorecard.isRight should be (true)
    nextScorecard.right.get.totalScore should be (1)
  }

  "A new scorecard" should "reject a roll of -1" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(-1)
    nextScorecard.isLeft should be (true)
    nextScorecard.left.get should be ("Invalid roll: should be between 0 and 10")
  }

  "A new scorecard" should "reject a roll of 11" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(11)
    nextScorecard.isLeft should be (true)
    nextScorecard.left.get should be ("Invalid roll: should be between 0 and 10")
  }

  "The scorecard generated by a roll of 1" should "respond to a roll of zero with a scorecard that reports the total score as 1" in  {
    val freshScorecard = new Scorecard
    val afterF1R1 = freshScorecard.roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(0)
    afterF1R2.isRight should be (true)
    afterF1R2.right.get.totalScore should be (1)
  }

  "The scorecard generated by a roll of 1" should "reject a roll of 10" in {
    val freshScorecard = new Scorecard
    val afterF1R1 = freshScorecard.roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(10)
    afterF1R2.isLeft should be (true)
    afterF1R2.left.get should be ("Invalid roll: should be between 0 and 9")
  }

  "The scorecard generated by a roll of 1" should "respond to a roll of zero with a scorecard that reports the next roll as Frame 2: Roll 1" in  {
    val freshScorecard = new Scorecard
    val afterF1R1 = freshScorecard.roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(0)
    afterF1R2.isRight should be (true)
    afterF1R2.right.get.nextRoll should be ("Frame 2: Roll 1")
  }

  "A new scorecard" should "respond to a roll of 10 with a scorecard that  reports the next roll as Frame 2: Roll 1" in {
    val freshScorecard = new Scorecard
    val afterStrike = freshScorecard.roll(10)
    afterStrike.isRight should be (true)
    afterStrike.right.get.nextRoll should be ("Frame 2: Roll 1")
  }

  "The scorecard generated by a roll of 10" should "respond to a roll of 1 with a scorecard that reports the next roll as Frame 2: Roll 2" in {
    val freshScorecard = new Scorecard
    val afterStrike = freshScorecard.roll(10)
    val afterF2R1 = afterStrike.right.get.roll(1)
    afterF2R1.isRight should be (true)
    afterF2R1.right.get.nextRoll should be ("Frame 2: Roll 2")
  }

  def rollNineStrikes = {
    val freshScorecard = new Scorecard
    val afterFirstStrike = freshScorecard.roll(10)
    val afterSecondStrike = afterFirstStrike.right.get.roll(10)
    val afterThirdStrike = afterSecondStrike.right.get.roll(10)
    val afterFourthStrike = afterThirdStrike.right.get.roll(10)
    val afterFifthStrike = afterFourthStrike.right.get.roll(10)
    val afterSixthStrike = afterFifthStrike.right.get.roll(10)
    val afterSeventhStrike = afterSixthStrike.right.get.roll(10)
    val afterEighthStrike = afterSeventhStrike.right.get.roll(10)
    afterEighthStrike.right.get.roll(10).right.get
  }

  "The scorecard generated by 9 rolls of 10 and 2 rolls of 0 " should "Report the next roll as 'Game Over'" in {
    val afterF10R1 = rollNineStrikes.roll(0)
    val afterF10R2 = afterF10R1.right.get.roll(0)
    afterF10R2.isRight should be (true)
    afterF10R2.right.get.nextRoll should be ("Game Over")
  }

  "The scorecard generated by 9 rolls of 10 and 2 rolls of 0 " should "Reject a new roll as 'Game Over'" in {
    val afterF10R1 = rollNineStrikes.roll(0)
    val afterF10R2 = afterF10R1.right.get.roll(0)
    val rollAfterEnd = afterF10R2.right.get.roll(0)
    rollAfterEnd.isLeft should be (true)
    rollAfterEnd.left.get should be ("Game Over")
  }

  def rollSpare(card: Scorecard): Scorecard = {
    val afterFirstRoll = card.roll(5)
    afterFirstRoll.right.get.roll(5).right.get
  }

  "The scorecard generated by a spare followed by a roll of 1" should "return a scorecard with a score of 12" in {
    val spare = rollSpare(new Scorecard).roll(1)
    spare.isRight should be (true)
    spare.right.get.totalScore should be (12)

  }

  "The scorecard generated by a strike followed by a roll of 1 then a roll of 2" should "return a scorecard with a score of 16" in {
    val strike = new Scorecard().roll(10)
    val afterF2R1 = strike.right.get.roll(1)
    val afterF2R2 = afterF2R1.right.get.roll(2)
    afterF2R2.isRight shouldBe true
    afterF2R2.right.get.totalScore shouldBe 16
  }

  "The scorecard generated by 9 rolls of 10 and 2 rolls of 5" should "Report the next roll as 'Bonus roll 1" in {
    val afterF10R1 = rollNineStrikes.roll(5)
    val afterF10R2 = afterF10R1.right.get.roll(5)
    afterF10R2.isRight shouldBe true
    afterF10R2.right.get.nextRoll shouldBe "Bonus roll 1"
  }

  "The scorecard generated by a spare in the tenth frame" should "Allow a further roll" in {
    val afterF10R1 = rollNineStrikes.roll(5)
    val afterF10R2 = afterF10R1.right.get.roll(5)
    val afterBonus1 = afterF10R2.right.get.roll(1)
    afterBonus1.isRight shouldBe true
  }

  "The scorecard generated by a spare in the tenth frame, then a bonus roll of 10" should "report the next roll as 'Game Over'" in {
    val afterF10R1 = rollNineStrikes.roll(5)
    val afterF10R2 = afterF10R1.right.get.roll(5)
    val afterBonus1 = afterF10R2.right.get.roll(10)
    afterBonus1.isRight shouldBe true
    afterBonus1.right.get.nextRoll shouldBe "Game Over"
  }

  "The scorecard generated by a spare in the tenth frame, then a bonus roll of 10" should "disallow a further roll'" in {
    val afterF10R1 = rollNineStrikes.roll(5)
    val afterF10R2 = afterF10R1.right.get.roll(5)
    val afterBonus1 = afterF10R2.right.get.roll(10)
    afterBonus1.isRight shouldBe true
    val afterBonus2 = afterBonus1.right.get.roll(0)
    afterBonus2.isLeft shouldBe true
    afterBonus2.left.get shouldBe "Game Over"
  }

  "The scorecard generated by a strike in the tenth frame, then a bonus roll of 10" should "Report the next roll as 'Bonus roll 2'" in {
    val afterF10R1 = rollNineStrikes.roll(10)
    val afterBonus1 = afterF10R1.right.get.roll(10)
    afterBonus1.isRight shouldBe true
    afterBonus1.right.get.nextRoll shouldBe "Bonus roll 2"
  }

  "The scorecard generated by a strike in the tenth frame, then a bonus roll of 10" should "Allow a further roll'" in {
    val afterF10R1 = rollNineStrikes.roll(10)
    val afterBonus1 = afterF10R1.right.get.roll(10)
    val afterBonus2 = afterBonus1.right.get.roll(0)
    afterBonus2.isRight shouldBe true
  }

  "The scorecard generated by a perfect game" should "Report the next roll as 'Game Over" in {
    val afterF10R1 = rollNineStrikes.roll(10)
    val afterBonus1 = afterF10R1.right.get.roll(10)
    val afterBonus2 = afterBonus1.right.get.roll(10)
    afterBonus2.isRight shouldBe true
    afterBonus2.right.get.nextRoll shouldBe "Game Over"

  }

  "The scorecard generated by a perfect game" should "Report a score of 300" in {
    val afterF10R1 = rollNineStrikes.roll(10)
    val afterBonus1 = afterF10R1.right.get.roll(10)
    val afterBonus2 = afterBonus1.right.get.roll(10)
    afterBonus2.isRight shouldBe true
    afterBonus2.right.get.totalScore shouldBe 300

  }

  "The scorecard generated by a perfect game" should "Disallow a further roll" in {
    val afterF10R1 = rollNineStrikes.roll(10)
    val afterBonus1 = afterF10R1.right.get.roll(10)
    val afterBonus2 = afterBonus1.right.get.roll(10)
    val afterPerfectGame = afterBonus2.right.get.roll(0)
    afterPerfectGame.isLeft shouldBe true
    afterPerfectGame.left.get shouldBe "Game Over"

  }

  "The scorecard generated by a roll of 1 " should "Show a first frame with a first roll of 1" in {
    val afterF1R1 = new Scorecard().roll(1)
    afterF1R1.isRight shouldBe true
    afterF1R1.right.get.getFrame(0).get.getRoll(0) shouldBe Some(1)
  }

  "The scorecard generated by a roll of 2 " should "Show a first frame with a first roll of 2" in {
    val afterF1R1 = new Scorecard().roll(2)
    afterF1R1.isRight shouldBe true
    afterF1R1.right.get.getFrame(0).get.getRoll(0) shouldBe Some(2)
  }

  "The scorecard generated by a roll of 1 and a roll of 2" should "Show a first frame with the rolls" in {
    val afterF1R1 = new Scorecard().roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(2)
    afterF1R2.isRight shouldBe true
    afterF1R2.right.get.getFrame(0).get.getRoll(0) shouldBe Some(1)
    afterF1R2.right.get.getFrame(0).get.getRoll(1) shouldBe Some(2)
  }

  "The scorecard generated by a roll of 1 and a roll of 2" should "Show a first frame with a score of 3" in {
    val afterF1R1 = new Scorecard().roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(2)
    afterF1R2.isRight shouldBe true
    afterF1R2.right.get.getFrame(0).get.score shouldBe 3
  }

  "The scorecard generated by a roll of 1, a roll of 2 and a roll of 3" should "Show a second frame with a first roll of 3" in {
    val afterF1R1 = new Scorecard().roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(2)
    val afterF2R1 = afterF1R2.right.get.roll(3)
    afterF2R1.isRight shouldBe true
    afterF2R1.right.get.getFrame(1).get.getRoll(0) shouldBe Some(3)
  }



}
