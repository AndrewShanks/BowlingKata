package Scorecard

import org.scalatest._
/**
 * Created by andrew on 07/04/17.
 */
class ScorecardSpec   extends FlatSpec with Matchers {
  "A new scorecard" should "report the next roll as Frame 1: Roll 1" in {
    val myScorecard = new Scorecard
    myScorecard.nextRoll should be ("Frame 1: Roll 1")
  }

  "A new scorecard" should "report the total score as 0" in {
    val myScorecard = new Scorecard
    myScorecard.totalScore should be (0)
  }

  "A new scorecard" should "respond to a roll of zero with a scorecard that reports the total score as 0" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(0)
    nextScorecard.isRight should be (true)
    nextScorecard.right.get.totalScore should be (0)
  }

  "A new scorecard" should "respond to a roll of zero with a scorecard that reports the next roll as Frame 1: Roll 2" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(0)
    nextScorecard.isRight should be (true)
    nextScorecard.right.get.nextRoll should be ("Frame 1: Roll 2")
  }

  "A new scorecard" should "respond to a roll of 1 with a scorecard that reports the total score as 1" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(1)
    nextScorecard.isRight should be (true)
    nextScorecard.right.get.totalScore should be (1)
  }

  "A new scorecard" should "reject a roll of -1" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(-1)
    nextScorecard.isLeft should be (true)
    nextScorecard.left.get should be ("Invalid roll: should be between 0 and 10")
  }

  "A new scorecard" should "reject a roll of 11" in  {
    val myScorecard = new Scorecard
    val nextScorecard = myScorecard.roll(11)
    nextScorecard.isLeft should be (true)
    nextScorecard.left.get should be ("Invalid roll: should be between 0 and 10")
  }

  "The scorecard generated by a roll of 1" should "respond to a roll of zero with a scorecard that reports the total score as 1" in  {
    val freshScorecard = new Scorecard
    val afterF1R1 = freshScorecard.roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(0)
    afterF1R2.isRight should be (true)
    afterF1R2.right.get.totalScore should be (1)
  }

  "The scorecard generated by a roll of 1" should "reject a roll of 10" in {
    val freshScorecard = new Scorecard
    val afterF1R1 = freshScorecard.roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(10)
    afterF1R2.isLeft should be (true)
    afterF1R2.left.get should be ("Invalid roll: should be between 0 and 9")
  }

  "The scorecard generated by a roll of 1" should "respond to a roll of zero with a scorecard that reports the next roll as Frame 2: Roll 1" in  {
    val freshScorecard = new Scorecard
    val afterF1R1 = freshScorecard.roll(1)
    val afterF1R2 = afterF1R1.right.get.roll(0)
    afterF1R2.isRight should be (true)
    afterF1R2.right.get.nextRoll should be ("Frame 2: Roll 1")
  }

  "A new scorecard" should "respond to a roll of 10 with a scorecard that  reports the next roll as Frame 2: Roll 1" in {
    val freshScorecard = new Scorecard
    val afterStrike = freshScorecard.roll(10)
    afterStrike.isRight should be (true)
    afterStrike.right.get.nextRoll should be ("Frame 2: Roll 1")
  }

  "The scorecard generated by a roll of 10" should "respond to a roll of 1 with a scorecard that reports the next roll as Frame 2: Roll 2" in {
    val freshScorecard = new Scorecard
    val afterStrike = freshScorecard.roll(10)
    val afterF2R1 = afterStrike.right.get.roll(1)
    afterF2R1.isRight should be (true)
    afterF2R1.right.get.nextRoll should be ("Frame 2: Roll 2")
  }

  def rollNineStrikes = {
    val freshScorecard = new Scorecard
    val afterFirstStrike = freshScorecard.roll(10)
    val afterSecondStrike = afterFirstStrike.right.get.roll(10)
    val afterThirdStrike = afterSecondStrike.right.get.roll(10)
    val afterFourthStrike = afterThirdStrike.right.get.roll(10)
    val afterFifthStrike = afterFourthStrike.right.get.roll(10)
    val afterSixthStrike = afterFifthStrike.right.get.roll(10)
    val afterSeventhStrike = afterSixthStrike.right.get.roll(10)
    val afterEighthStrike = afterSeventhStrike.right.get.roll(10)
    afterEighthStrike.right.get.roll(10).right.get
  }

  "The scorecard generated by 9 rolls of 10 and 2 rolls of 0 " should "Report the next roll as 'Game Over'" in {
    val afterF10R1 = rollNineStrikes.roll(0)
    val afterF10R2 = afterF10R1.right.get.roll(0)
    afterF10R2.isRight should be (true)
    afterF10R2.right.get.nextRoll should be ("Game Over")
  }

  "The scorecard generated by 9 rolls of 10 and 2 rolls of 0 " should "Reject a new roll as 'Game Over'" in {
    val afterF10R1 = rollNineStrikes.roll(0)
    val afterF10R2 = afterF10R1.right.get.roll(0)
    val rollAfterEnd = afterF10R2.right.get.roll(0)
    rollAfterEnd.isLeft should be (true)
    rollAfterEnd.left.get should be ("Game Over")
  }


}
